// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/data/data.proto

package data

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SObjectService service

func NewSObjectServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SObjectService service

type SObjectService interface {
	Create(ctx context.Context, in *CreateSObjectRequest, opts ...client.CallOption) (*SObject, error)
	Update(ctx context.Context, in *UpdateSObjectRequest, opts ...client.CallOption) (*SObject, error)
	Upsert(ctx context.Context, in *UpsertSObjectRequest, opts ...client.CallOption) (*UpsertSObjectResponse, error)
	Get(ctx context.Context, in *GetSObjectRequest, opts ...client.CallOption) (*SObject, error)
	Delete(ctx context.Context, in *DeleteSObjectRequest, opts ...client.CallOption) (*emptypb.Empty, error)
}

type sObjectService struct {
	c    client.Client
	name string
}

func NewSObjectService(name string, c client.Client) SObjectService {
	return &sObjectService{
		c:    c,
		name: name,
	}
}

func (c *sObjectService) Create(ctx context.Context, in *CreateSObjectRequest, opts ...client.CallOption) (*SObject, error) {
	req := c.c.NewRequest(c.name, "SObjectService.Create", in)
	out := new(SObject)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sObjectService) Update(ctx context.Context, in *UpdateSObjectRequest, opts ...client.CallOption) (*SObject, error) {
	req := c.c.NewRequest(c.name, "SObjectService.Update", in)
	out := new(SObject)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sObjectService) Upsert(ctx context.Context, in *UpsertSObjectRequest, opts ...client.CallOption) (*UpsertSObjectResponse, error) {
	req := c.c.NewRequest(c.name, "SObjectService.Upsert", in)
	out := new(UpsertSObjectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sObjectService) Get(ctx context.Context, in *GetSObjectRequest, opts ...client.CallOption) (*SObject, error) {
	req := c.c.NewRequest(c.name, "SObjectService.Get", in)
	out := new(SObject)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sObjectService) Delete(ctx context.Context, in *DeleteSObjectRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "SObjectService.Delete", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SObjectService service

type SObjectServiceHandler interface {
	Create(context.Context, *CreateSObjectRequest, *SObject) error
	Update(context.Context, *UpdateSObjectRequest, *SObject) error
	Upsert(context.Context, *UpsertSObjectRequest, *UpsertSObjectResponse) error
	Get(context.Context, *GetSObjectRequest, *SObject) error
	Delete(context.Context, *DeleteSObjectRequest, *emptypb.Empty) error
}

func RegisterSObjectServiceHandler(s server.Server, hdlr SObjectServiceHandler, opts ...server.HandlerOption) error {
	type sObjectService interface {
		Create(ctx context.Context, in *CreateSObjectRequest, out *SObject) error
		Update(ctx context.Context, in *UpdateSObjectRequest, out *SObject) error
		Upsert(ctx context.Context, in *UpsertSObjectRequest, out *UpsertSObjectResponse) error
		Get(ctx context.Context, in *GetSObjectRequest, out *SObject) error
		Delete(ctx context.Context, in *DeleteSObjectRequest, out *emptypb.Empty) error
	}
	type SObjectService struct {
		sObjectService
	}
	h := &sObjectServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SObjectService{h}, opts...))
}

type sObjectServiceHandler struct {
	SObjectServiceHandler
}

func (h *sObjectServiceHandler) Create(ctx context.Context, in *CreateSObjectRequest, out *SObject) error {
	return h.SObjectServiceHandler.Create(ctx, in, out)
}

func (h *sObjectServiceHandler) Update(ctx context.Context, in *UpdateSObjectRequest, out *SObject) error {
	return h.SObjectServiceHandler.Update(ctx, in, out)
}

func (h *sObjectServiceHandler) Upsert(ctx context.Context, in *UpsertSObjectRequest, out *UpsertSObjectResponse) error {
	return h.SObjectServiceHandler.Upsert(ctx, in, out)
}

func (h *sObjectServiceHandler) Get(ctx context.Context, in *GetSObjectRequest, out *SObject) error {
	return h.SObjectServiceHandler.Get(ctx, in, out)
}

func (h *sObjectServiceHandler) Delete(ctx context.Context, in *DeleteSObjectRequest, out *emptypb.Empty) error {
	return h.SObjectServiceHandler.Delete(ctx, in, out)
}
